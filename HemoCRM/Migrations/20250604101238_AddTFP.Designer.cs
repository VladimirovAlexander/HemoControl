// <auto-generated />
using System;
using HemoCRM.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HemoCRM.Web.Migrations
{
    [DbContext(typeof(HemoCrmDbContext))]
    [Migration("20250604101238_AddTFP")]
    partial class AddTFP
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HemoCRM.Web.Models.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiagnosisCode")
                        .HasColumnType("integer");

                    b.Property<string>("DiagnosisName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.DoctorAppointmentSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("DoctorAppointmentSlots");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Injection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<int>("DoseIU")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InjectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InjectionSite")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PatientId");

                    b.ToTable("Injections");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Medication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Notes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anamnesis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("BloodPressureDiastolic")
                        .HasColumnType("smallint");

                    b.Property<byte>("BloodPressureSystolic")
                        .HasColumnType("smallint");

                    b.Property<string>("Complaints")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Examination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GeneralConditions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<string>("Physique")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReceptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Skin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Turnout")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ReceptionId")
                        .IsUnique();

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AppartmentNumber")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HouseNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Passport")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Policy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Reception", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SlotId")
                        .IsUnique();

                    b.ToTable("Receptions");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionId");

                    b.ToTable("Tests", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("HemoCRM.Web.Models.CoagulogramTest", b =>
                {
                    b.HasBaseType("HemoCRM.Web.Models.Test");

                    b.Property<double>("APTT")
                        .HasColumnType("double precision");

                    b.Property<double>("Fibrinogen")
                        .HasColumnType("double precision");

                    b.Property<double>("INR")
                        .HasColumnType("double precision");

                    b.Property<double>("PT")
                        .HasColumnType("double precision");

                    b.ToTable("CoagulogramTests", (string)null);
                });

            modelBuilder.Entity("HemoCRM.Web.Models.CompleteBloodCountTest", b =>
                {
                    b.HasBaseType("HemoCRM.Web.Models.Test");

                    b.Property<double>("Hematocrit")
                        .HasColumnType("double precision");

                    b.Property<double>("Hemoglobin")
                        .HasColumnType("double precision");

                    b.Property<double>("MCH")
                        .HasColumnType("double precision");

                    b.Property<double>("MCV")
                        .HasColumnType("double precision");

                    b.Property<double>("Platelets")
                        .HasColumnType("double precision");

                    b.Property<double>("RedBloodCells")
                        .HasColumnType("double precision");

                    b.Property<double>("WhiteBloodCells")
                        .HasColumnType("double precision");

                    b.ToTable("CompleteBloodCountTests", (string)null);
                });

            modelBuilder.Entity("HemoCRM.Web.Models.FactorAndVWFTest", b =>
                {
                    b.HasBaseType("HemoCRM.Web.Models.Test");

                    b.Property<double>("FactorIX")
                        .HasColumnType("double precision");

                    b.Property<double>("FactorVIII")
                        .HasColumnType("double precision");

                    b.Property<double>("VWFActivity")
                        .HasColumnType("double precision");

                    b.ToTable("FactorAndVWFTests", (string)null);
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Diagnosis", b =>
                {
                    b.HasOne("HemoCRM.Web.Models.Patient", "Patient")
                        .WithMany("Diagnoses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.DoctorAppointmentSlot", b =>
                {
                    b.HasOne("HemoCRM.Web.Models.Doctor", "Doctor")
                        .WithMany("AppointmentSlots")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HemoCRM.Web.Models.Patient", null)
                        .WithMany("AppointmentSlots")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Injection", b =>
                {
                    b.HasOne("HemoCRM.Web.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("HemoCRM.Web.Models.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HemoCRM.Web.Models.Patient", "Patient")
                        .WithMany("Injections")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Medication");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Medication", b =>
                {
                    b.HasOne("HemoCRM.Web.Models.Patient", "Patient")
                        .WithMany("Medications")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Notes", b =>
                {
                    b.HasOne("HemoCRM.Web.Models.Reception", "Reception")
                        .WithOne("Notes")
                        .HasForeignKey("HemoCRM.Web.Models.Notes", "ReceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Reception", b =>
                {
                    b.HasOne("HemoCRM.Web.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HemoCRM.Web.Models.Patient", "Patient")
                        .WithMany("Receptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HemoCRM.Web.Models.DoctorAppointmentSlot", "Slot")
                        .WithOne("Reception")
                        .HasForeignKey("HemoCRM.Web.Models.Reception", "SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Test", b =>
                {
                    b.HasOne("HemoCRM.Web.Models.Patient", "Patient")
                        .WithMany("Tests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HemoCRM.Web.Models.Reception", "Reception")
                        .WithMany("Tests")
                        .HasForeignKey("ReceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.CoagulogramTest", b =>
                {
                    b.HasOne("HemoCRM.Web.Models.Test", null)
                        .WithOne()
                        .HasForeignKey("HemoCRM.Web.Models.CoagulogramTest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HemoCRM.Web.Models.CompleteBloodCountTest", b =>
                {
                    b.HasOne("HemoCRM.Web.Models.Test", null)
                        .WithOne()
                        .HasForeignKey("HemoCRM.Web.Models.CompleteBloodCountTest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HemoCRM.Web.Models.FactorAndVWFTest", b =>
                {
                    b.HasOne("HemoCRM.Web.Models.Test", null)
                        .WithOne()
                        .HasForeignKey("HemoCRM.Web.Models.FactorAndVWFTest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Doctor", b =>
                {
                    b.Navigation("AppointmentSlots");

                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.DoctorAppointmentSlot", b =>
                {
                    b.Navigation("Reception")
                        .IsRequired();
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Patient", b =>
                {
                    b.Navigation("AppointmentSlots");

                    b.Navigation("Diagnoses");

                    b.Navigation("Injections");

                    b.Navigation("Medications");

                    b.Navigation("Receptions");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("HemoCRM.Web.Models.Reception", b =>
                {
                    b.Navigation("Notes")
                        .IsRequired();

                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
